using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace ExternalScriptInvokeDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Well, going to execute a script in the local directory");
            Program program = new Program();
            string mainModulePath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
            Console.WriteLine(mainModulePath);
            string filepath = mainModulePath + @"\..\..\..\testPython.py";
            Console.WriteLine("Going to execute file at : [ " + filepath + " ]");
            Console.WriteLine("We will use local python interpreter");
            Console.WriteLine("Below is the content of the script " + "\n" + "==============================");
            string[] lines = File.ReadAllLines(filepath);
            foreach (string line in lines)
                Console.WriteLine(line);
            Console.WriteLine("==============================" + "\n" + "Executing Now");
            Console.WriteLine(program.run_cmd("python.exe", filepath, ""));
        }

        public string run_cmd(string filepath, string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = filepath;
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            try
            {
                using (Process process = Process.Start(start))
                {
                    using (StreamReader reader = process.StandardOutput)
                    {
                        string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                        string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                        return result;
                    }
                }
            }
            catch (SystemException se) {
                Console.WriteLine(se.Message + "\n" + se.StackTrace);
            } finally
            {
                Console.WriteLine("Could not execute this script");
            }
            return "Execution Failed";
        }
    }
}
